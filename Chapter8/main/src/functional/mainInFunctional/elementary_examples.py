"""
Простые примеры трех понятий функционального программирования:
отображение, фильтрация и упрощение
"""
import functools
import itertools
import operator

#1. map - отображение, совместное использование функции и итерируемого объекта и получение нового итерируемого объекта,
#каждый элемент которого представляет результат вызова функции для соответствующего элемента
print(list(map(lambda x: x **2, [1, 2, 3, 4]))) #вернет: [1, 4, 9, 16], если без list - то генератор
#аналог
print([x**2 for x in [1, 2, 3, 4]])

#2. filter - фильтрация, совместное использование функции и итерируемого объекта и получение нового итерируемого объекта,
#в состав которого включаются все те элементы оригинального итерируемого объекта, для которых функция вернула значение True

print(list(filter(lambda x: x > 0, [1, -2, 3, -4]))) #вернет: [1, 3], если без list - то генератор
#аналог
print([x for x in [1, -2, 3, -4] if x > 0])

#3. functools.reduce - упрощение, совместное использование функции и итерируемого объекта и получение в качестве результата
# отдельного значения. Сначала функции передаются значения первого и второго элементов итерируемого значения,
# затем вычисленный результат и значение третьего элемента и т.д.
print(functools.reduce(lambda x, y: x*y, [1, 2, 3, 4])) #вернет 24
print(functools.reduce(operator.mul, [1, 2, 3, 4])) #вернет 24

#Модуль operator содержит функции, реализующие действия всех операторв языка python, позволяет упростить программирование в
#функциональном стиле

#4. Модуль itertools
data_list1 = [1, 2, 3]
data_list2 = [4, 5]
data_list3 = [6]
total = 0
for value in itertools.chain(data_list1, data_list2, data_list3):
    total += value
    print(total)