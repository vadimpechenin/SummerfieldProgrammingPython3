import re

text = "подоходный налог"
match = re.findall(r"прибыль|обретение|доход", text)
print(match)


#2. Выделение слова «доход» целиком с использованием проверки \b
text = "подоходный налог, доход"
match = re.findall(r"прибыль|обретение|\bдоход\b", text)
print(match)

#3. Группировка для выделения слов целиком с использованием проверки \b
match = re.findall(r"\b(?:прибыль|обретение|доход)\b", text)
print(match)

"""
Проверки для регулярных выражений
Символ              Описание
^                   Начало текста (с флагом re.MULTILINE – начало строки)

$                   Конец текста (с флагом re.MULTILINE – позиция перед символом переноса строки \n)

\A                  Начало текста

\b                  Граница слова (внутри символьных классов [] соответствует символу BACKSPACE)

\B                  Граница не слова (зависим от флага re.ASCII)

\Z                  Конец текста

(?=exp)             Проверка на совпадение с выражением exp продолжения строки. При этом позиция поиска не смещается на выражение exp (опережающая проверка).

(?!exp)             Проверка на несовпадение с выражением exp продолжения строки. (Также опережающая проверка).

(?<=exp)            Проверка на совпадение с выражением exp хвоста уже обработанной (проверенной) строки. Она также называется позитивной ретроспективной проверкой.

(?<!exp)            Проверка на несовпадение с выражением exp хвоста уже обработанной (проверенной) строки. Еще она называется негативной ретроспективной проверкой.
"""


text = """<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Уроки по Python</title>
</head>
<body>
<script type="text/javascript">
let o = document.getElementById('id_div');
console.log(obj);
</script>
</body>
</html>"""
#4. Выделить содержимое тега script.
match = re.findall(r"^<script.*?>([\w\W]+)(?=</script>)", text, re.MULTILINE)
print(match)

#5. Выбрать все пары атрибут=значение
match = re.findall(r"([-\w]+)[ \t]*=[ \t]*[\"']([^\"']+)(?<![ \t])", text, re.MULTILINE)
print(match)

text = """<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type " content="text/html; charset=windows-1251">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Уроки по Python</title>
</head>
<body>
<p align=center>Hello World!</p>
</body>
</html>"""

#6. определим правило для выделения пар: ключ="значение"   или   ключ=значение
match = re.findall(r"([-\w]+)[ \t]*=[ \t]*(?P<q>[\"'])?(?(q)([^\"']+(?<![ \t]))|([^ \t>]+))", text, re.MULTILINE)
print(match)

"""
Флаги для регулярных выражений
Флаг                    Описание
re.A или re.ASCII       При этом флаге проверки \b, \B, \s, \S, \w и \W действуют так, как если бы они применялись к тексту, 
                        содержащему только символы ASCII (по умолчанию используется Юникод re.U / re.UNICODE
                        и лучше оставаться в этом режиме)

re.I или re.IGNORECASE  Проверка без учета регистра символов

re.M или re.MULTILINE   Влияет на проверки ^ и $. Начало ^ считается началом строки (сразу после символа \n или 
                        начало текста). Конец $ считается в позиции перед \n (или конец строки)

re.S или re.DOTALL      При установке этого флага символ . также включает символ перевода строки \n.

re.X или re.VERBOSE     Позволяет включать в регулярные выражения пробелы и комментарии

re.DEBUG                Включает режим отладки при компиляции регулярного выражения
"""

#7. определим правило с набором комментариев
match = re.findall(r"""([-\w]+)             #выделяем атрибут
                   [ \t]*=[ \t]*            #далее, должно идти равно и кавычки
                   (?P<q>[\"'])?            #проверяем наличие кавычки
                   (?(q)([^\"']+(?<![ \t]))|([^ \t>]+))     #выделяем значение атрибута
                   """,
                   text, re.MULTILINE|re.VERBOSE)
print(match)

#8. Флаги можно указывать и непосредственно внутри выражения, используя синтаксис:
#   (?flags),

text = "Python, python, PYTHON"
match = re.findall(r"(?im)python", text) #2 флага I и M (последний, впринципе, не нужен)
print(match)